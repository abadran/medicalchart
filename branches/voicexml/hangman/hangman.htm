<!-- Ahmed Badran              -->
<!-- Vasile O Mihaescu         -->
<!-- Multimodal Hangman Game   -->
<!-- June 9th, 2009            -->
<!-- Portland State University -->


<html>
<head>

<title>Hangman</title>

<!-- This script adds WAMI capabilities to the web page. The devKey is domain specific. A new key is needed -->
<!-- for each domain the page is deployed on.                                                               -->
<script src="http://wami.csail.mit.edu/portal/wami.js?devKey=9e0ad087096c535c0714e085f28bf738"> </script>

<script><!--

    var myWamiApp;
    var alphabet = new Array("a","b","c","d","e","f","g","h","i","j","k","l","m",
    		                 "n","o","p","q","r","s","t","u","v","w","x","y","z");

    var guessChoices = new Array("international","fantastic","saturday",
    	    "chicken","superlative","infinitesimal","finite","dictionary",
    	    "intense","denture","philistene","strange","furlong","machine",
    	    "forerunner","mercantile","belligerent","enticing","multimodal",
    	    "pharmaceutical","acronym","fragmentation","inrinsic","underwriting",
    	    "shenanigan");
    
    var loserMessages = new Array("Wow, that was pretty bad. Try again?",
    	    "That was a difficult one. Try a new word?",
    	    "Nobody's perfect! Play again?",
    	    "You can't win them all. Start over?");
    var winnerMessages = new Array("Yay! You're good! Want more?",
            "Great! Try a new word?",
            "You're doing great! Play again?",
            "This is awesome, let's try a new word!");
    var usedLetters = "";
    var guessWord;
    var current_image = 1;
    var lastInputSource;
    
    function onLoad() {
        //div in which to put the audio button, see below
        var audioDiv = document.getElementById('AudioContainer'); 
    
        var jsgf = "#JSGF V1.0;\n" +
                   "grammar Hangman;\n" +
                   "public <top> = <letter> | <command>;\n" +
                   "<letter> = aye {[letter=a]} | alpha {[letter=a]} | bee {[letter=b]} | bravo {[letter=b]} | sea {[letter=c]} | charlie {[letter=c]}\n" +
                   "         | dee {[letter=d]} | delta {[letter=d]} | ee {[letter=e]} | echo {[letter=e]} | eff {[letter=f]} | foxtrot {[letter=f]}\n" +
                   "         | gee {[letter=g]} | golf {[letter=g]} | age {[letter=h]} | hotel {[letter=h]} | jay {[letter=j]} | juliet {[letter=j]}\n" +
                   "         | kay {[letter=k]} | kilo {[letter=k]} | ell {[letter=l]} | lima {[letter=l]} | emm {[letter=m]} | mike {[letter=m]}\n" +
                   "         | enn {[letter=n]} | november {[letter=n]} | oh {[letter=o]} | oscar {[letter=o]} | pee {[letter=p]} | papa {[letter=p]}\n" +
                   "         | queue {[letter=q]} | quebec {[letter=q]} | are {[letter=r]} | romeo {[letter=r]} | ess {[letter=s]} | sierra {[letter=s]}\n" +
                   "         | tea {[letter=t]} | tango {[letter=t]} | you {[letter=u]} | uniform {[letter=u]} | vee {[letter=v]} | victor {[letter=v]}\n" +
                   "         | double you {[letter=w]} | whiskey {[letter=w]} | ecks {[letter=x]} | xray {[letter=x]} | why {[letter=y]}| whiskey {[letter=y]}\n" +
                   "         | zulu {[letter=z]} | zee {[letter=z]} | zed {[letter=z]};\n" +
                   "<command> = no {[command=back]} | wrong {[command=back]} | back {[command=back]}\n" +
                   "          | start over {[command=neword]} | new word {[command=neword]}\n" + 
                   "           ;";
    
        var grammar = {"language" : "en-us", "grammar" : jsgf };
    
        //Audio options.
        //pollForAudio: must be true for speech synthesis to work. 
        //If your application doesn't use speech synthesis, set this to false.
        var audioOptions = {"width": "200", "height": "50", "pollForAudio" : true};
    
        //Configuration options.
        //sendIncrementalResults: if true, you'll receive "incremental" recognition results as the user speaks
        //sendAggregates: if true, you'll receive a "semantic" interpretation.  Your grammar
        //must follow a specific format.
        var configOptions = {"sendIncrementalResults" : false, "sendAggregates" : true};
      
        //Handlers are functions which are called for various events:
        var handlers = {"onReady" : onWamiReady, //WAMI is loaded and ready
                        "onRecognitionResult" : onWamiRecognitionResult,  //Speech recognition result available
                        "onError" : onWamiError,  //An error occurred
                        "onTimeout" : onWamiTimeout}; //WAMI timed out due to inactivity
        //Create your WAMI application with the settings and grammar we just created
        myWamiApp = new WamiApp(audioDiv, handlers, "json", audioOptions, configOptions, grammar);
    }

    function onWamiReady() {
        //hide the "Loading" message
        var loadingDiv = document.getElementById("LoadingDiv");
        loadingDiv.parentNode.removeChild(loadingDiv);
        var imageDiv = document.getElementById("HangmanImage");
        imageDiv.style.visibility = 'visible';
        myWamiApp.speak("Welcome to the game of Hang man.");
        startOver();
        setFocus('TypedLetter');
    }

    //called when a speech recognition result is received
    //since we set sendIncrementalResults to false, this will only
    //be called after the user finishes speaking.  Otherwise,
    //it will be called many times as the user speaks.
    function onWamiRecognitionResult(result) {
        if(!result.hyps || result.hyps.length == 0 || !result.hyps[0].aggregate) {
            return;
        }
    
        //key value pairs
        var aggregate = result.hyps[0].aggregate;
        var kvs = aggregate.kvs;
    
        // process command or letter
        if (kvs.command != null) {
            processCommand(kvs.command);
        } else if (kvs.letter != null) {
            lastInputSource = "voice";
			processLetter(kvs.letter);
        }
        setFocus('TypedLetter');
    }

    //called when an error occurs
    function onWamiError(type, message) {
        alert("WAMI error: type  = " + type + ", message = " + message);    
    }
    
    //called when your WAMI session times out due to
    //in activity.
    function onWamiTimeout() {
        alert("WAMI timed out.  Hit reload to start over");
    }
    
    //called when user issues a command, like "new word" or "back"
    function processCommand(command) {
        if ("neword"==command) {
            startOver();
        } else if ("back"==command) {
            clearLastInput();
        }
    }

    // pick a new word, reset values, start with a clean slate
    function startOver() {
        guessWord = guessChoices[Math.round((guessChoices.length - 1)*Math.random())].toLowerCase();
        usedLetters = "";
        current_image = 1;
        var image_tag = document.getElementById('state_image');
        image_tag.src = "images/" + current_image.toString() + ".png";        
	    enable_all_keys();
	    lastInputSource = "";
        refreshDisplay();
    }
    
    //called when a new word is picked and after a letter is obtained from the user
    function refreshDisplay() {
        var pattern = new Array(guessWord.length);
        var hangmanWordEl = document.getElementById("HangmanWord");
        var usedLettersEl = document.getElementById("UsedLetters");
        var i,c;
        var charIndex;
        
        for (i=0;i<guessWord.length;i++) {
            pattern[i] = "_";
        }
        
        for (u=0;u<usedLetters.length;u++) {
            for (g=0;g<guessWord.length;g++) {
                if (guessWord.charAt(g)==usedLetters.charAt(u)) {
                    pattern[g] = guessWord.charAt(g);
                }
            }
        }
        
        clearChildren(hangmanWordEl);
        hangmanWordEl.appendChild(document.createTextNode(pattern.join(' ')));
        
        if (pattern.join('')==guessWord) {
            winner();
        }

        setFocus('TypedLetter');
    }
    
    //called when user enters or says a letter
    function processLetter(letter) {
        letter = letter.toLowerCase();
        if (-1 == usedLetters.indexOf(letter) && current_image < 11 && isInAlphabet(letter)) {
		    var button_name = "button_" + letter;
		    var button = document.getElementById(button_name);
		    button.disabled = "disabled";
		    
	        usedLetters = usedLetters.concat(letter);
	        if (-1 == guessWord.indexOf(letter)) {
	            wrongLetter(letter);
	        } else {
	            rightLetter(letter);
	        }
	        refreshDisplay();
        }
    }
    
    //called when user wants to cheat or the voice recognition didn't work
    function clearLastInput() {
        if ("voice"==lastInputSource && 11!=current_image) {
        	current_image -= 1;
            lastInputSource = "";
            var lastLetter = usedLetters.charAt(usedLetters.length-1);
            var button_name = "button_" + lastLetter;
            var button = document.getElementById(button_name);
            button.disabled = "";
            button.setAttribute("style", "");
            var image_tag = document.getElementById('state_image');
            image_tag.src = "images/" + current_image.toString() + ".png";            
        }
    }

    //called when user enters a letter
    function processTypedLetter(e) {
        var k;
        var isLetter;
        var letter;
        document.all ? k = e.keyCode : k = e.which;
        isLetter = ((k > 64 && k < 91) || (k > 96 && k < 123) || k == 8);
        if (isLetter && (letter=document.getElementById("TypedLetter").value).length > 0) {
            lastInputSource = "keyboard";
            processLetter(letter.toLowerCase());
        }
        document.getElementById('TypedLetter').value = "";
    }

    function processClickedLetter(letter) {
        lastInputSource = "mouse";
        processLetter(letter);
    }
    
    //called when the user did not quess a letter
    function wrongLetter(letter) {
	// turn off letter button before the 'loser' function since it may
	// re-enable all the buttons as a result of a startOver.
	var button_name = "button_" + letter;
	var button = document.getElementById(button_name);
	button.style.backgroundColor = "red";
	button.style.color = "white";

        // advance hangman image
        if (current_image < 11) {
        	current_image += 1;
            var image_tag = document.getElementById('state_image');
            image_tag.src = "images/" + current_image.toString() + ".png";
            if (current_image == 11) {
                loser();
            }
        }
         
    }

    //called when user guesses a letter
    function rightLetter(letter) {
        var button_name = "button_" + letter;
        var button = document.getElementById(button_name);
        button.style.backgroundColor = "lawngreen";
        button.style.color = "black";
    }
    

    //called when user guesses all letters in a word
    function winner() {
	    var image_tag = document.getElementById('state_image');
	    image_tag.src = "images/free.png";
	    current_image = 11;
	    disable_all_keys();
        var message = winnerMessages[Math.round((winnerMessages.length - 1)*Math.random())];
        if (confirm(message)) {
            startOver();
        }	    
    }
    
    // called at the end when the user has exhausted all their trials.
    function loser() {
       disable_all_keys();
       var message = loserMessages[Math.round((loserMessages.length - 1)*Math.random())];
       if (confirm(message)) {
           startOver();
       }
    }
    
    //utility functions
    function clearChildren(e) {
        while(e.childNodes && e.childNodes.length > 0) {
            e.removeChild(e.childNodes[0]);
        }
    }

    function setFocus(a_field_id) {
        document.getElementById(a_field_id).focus();
    }

    // called at startup to enable all the keys.
    function enable_all_keys() {
    	alphabet.forEach(function(item) {
        	var button = document.getElementById("button_"+item);  
            button.disabled = "";
            button.setAttribute("style", "");
        });
    }

    function disable_all_keys() {
        alphabet.forEach(function(item) { 
            document.getElementById("button_"+item).disabled = "disabled";
        });
    }

    function isInAlphabet(character) {
        var inAlphabet = false;
    	alphabet.forEach(function(item) { 
            if (item==character) {
                inAlphabet = true;
            }
        });
        return inAlphabet;
    }

--></script>

<!--  CSS styles used in the game -->
<style type="text/css">
#PageTitle {
	font-family: Comic Sans MS, cursive;
	font-size: 48px;
}

#HangmanWord {
	font-size: 4em;
	font-family: monospace;
}

#HangmanImage {
	visibility: hidden;
}

#LoadingDiv {
	position: absolute;
	left: 45%;
	top: 300px;
	z-index: 1;
	background-color: blue;
	visibility: visible;
	width: 100px;
	height: 100px;
}

#TypedLetter {
/*
	position: absolute;
	top: -10em;
	left: -10em;
*/
}

.wrong {
	color: red;
	font-weight: bold;
}

.neword {
	color: green;
	font-weight: bold;
}
</style>
</head>

<body onload="onLoad()">

<div id="MainDiv">
<center>
<div id="PageTitle">Hangman</div>

<div id="HangmanImage"><img id="state_image" src="images/1.png" name="state_image" /></div>

<div id="HangmanWord"></div>

<p>
<div id="AudioContainer"></div>
<!--  Audio button will be put here -->
<div id="keyboard">
<p>
<button id="button_q" type="button" onmousedown="processLetter('q')"><b>Q</b><br>
Quebec</button>
<button id="button_w" type="button" onmousedown="processLetter('w')"><b>W</b><br>
Whiskey</button>
<button id="button_e" type="button" onmousedown="processLetter('e')"><b>E</b><br>
Echo</button>
<button id="button_r" type="button" onmousedown="processLetter('r')"><b>R</b><br>
Romeo</button>
<button id="button_t" type="button" onmousedown="processLetter('t')"><b>T</b><br>
Tango</button>
<button id="button_y" type="button" onmousedown="processLetter('y')"><b>Y</b><br>
Yankee</button>
<button id="button_u" type="button" onmousedown="processLetter('u')"><b>U</b><br>
Uniform</button>
<button id="button_i" type="button" onmousedown="processLetter('i')"><b>I</b><br>
India</button>
<button id="button_o" type="button" onmousedown="processLetter('o')"><b>O</b><br>
Oscar</button>
<button id="button_p" type="button" onmousedown="processLetter('p')"><b>P</b><br>
Papa</button>
<br />
<button id="button_a" type="button" onmousedown="processLetter('a')"><b>A</b><br>
Alpha</button>
<button id="button_s" type="button" onmousedown="processLetter('s')"><b>S</b><br>
Sierra</button>
<button id="button_d" type="button" onmousedown="processLetter('d')"><b>D</b><br>
Delta</button>
<button id="button_f" type="button" onmousedown="processLetter('f')"><b>F</b><br>
Foxtrot</button>
<button id="button_g" type="button" onmousedown="processLetter('g')"><b>G</b><br>
Golf</button>
<button id="button_h" type="button" onmousedown="processLetter('h')"><b>H</b><br>
Hotel</button>
<button id="button_j" type="button" onmousedown="processLetter('j')"><b>J</b><br>
Juliet</button>
<button id="button_k" type="button" onmousedown="processLetter('k')"><b>K</b><br>
Kilo</button>
<button id="button_l" type="button" onmousedown="processLetter('l')"><b>L</b><br>
Lima</button>
<br />
<button id="button_z" type="button" onmousedown="processLetter('z')"><b>Z</b><br>
Zulu</button>
<button id="button_x" type="button" onmousedown="processLetter('x')"><b>X</b><br>
Xray</button>
<button id="button_c" type="button" onmousedown="processLetter('c')"><b>C</b><br>
Charlie</button>
<button id="button_v" type="button" onmousedown="processLetter('v')"><b>V</b><br>
Victor</button>
<button id="button_b" type="button" onmousedown="processLetter('b')"><b>B</b><br>
Bravo</button>
<button id="button_n" type="button" onmousedown="processLetter('n')"><b>N</b><br>
November</button>
<button id="button_m" type="button" onmousedown="processLetter('m')"><b>M</b><br>
Mike</button>
</p>
</div>

<div id="Instructions">Guess the letters by <b>saying</b>, <b>clicking</b>, or <b>typing</b> them in this box:  
<form>
    <input id="TypedLetter" type="text" size="1" maxlength="1" onkeyup="processTypedLetter(event)"></input>
</form>
<br />
If we get the letter wrong, you can say <span class="wrong">wrong</span> or <span class="wrong">back</span>. <br />
To start over, say <span class="neword">start over</span> or <span class="neword">new word</span>.<br />
</div>

<div id="UsedLetters"></div>

<br />

<div style="font-size:small; color: grey;">
Powered by the <a href="http://wami.csail.mit.edu/">WAMI Javascript API</a>
</div>

</center>
</div>

<div id="LoadingDiv">
<center><br>
<br>
Loading...</center>
</div>

</body>
</html>
